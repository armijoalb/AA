ed.high_school = ifelse(x$EDUCATION == 3 | x$EDUCATION == 2, 1, 0)
ed.school = ifelse(x$EDUCATION == 1 | x$EDUCATION == 2 | x$EDUCATION == 3, 1, 0)
x = cbind(x,ed.other, ed.high_school, ed.school, ed.university)
# Borramos la columna EDUCATION.
x = x[,-which(colnames(x) == "EDUCATION")]
# Columna MARRIAGE.
marriage.married = ifelse(x$MARRIAGE == 1, 1,0)
marriage.single = ifelse(x$MARRIAGE == 2, 1,0)
marriage.others = ifelse(x$MARRIAGE == 3, 1,0)
# Introducimos los datos.
x = cbind(x, marriage.married, marriage.single, marriage.others)
# Borramos la variable MARRIAGE.
x = x[, -which(colnames(x) == "MARRIAGE")]
# Cambiamos el nombre de la variables PAY_0.
colnames(x)[which(colnames(x)=="PAY_0")]="PAY_1"
x
}
preprocesar = function(x,pred=trans){
transTest = predict(pred, x)
transTest
}
prepareTest = function(x){
tr = reemplazarCol(x)
tr= preprocesar(x)
tr
}
pcaTransformation = prcomp(trainTransformado[,-default.payment.next.month], center=F, scale=F)
pcaTransformation$rotation
#modelo_step = glm(default.payment.next.month ~ .,family = gaussian, data=trainTransformado)
#modelo_principal = step(modelo_step)
muestra_regsubsets = regsubsets(default.payment.next.month ~ ., data = trainTransformado, nvmax = 28, method = "exhaustive")
summary((muestra_regsubsets))
reg.sumary = summary(muestra_regsubsets)
par(mfrow=c(1,2))
plot(reg.sumary$cp, xlab="number of variables", ylab="cp", type="l")
which.min(reg.sumary$cp)
plot(reg.sumary$bic, xlab="number of variables", ylab="BIC", type="l")
which.min(reg.sumary$bic)
par(mfrow=c(1,1) )
variablesSignificativasCredit = character()
for(nombre in names(trainTransformado) ){
pred = trainTransformado[, nombre]
modelo = lm(trainTransformado$default.payment.next.month~pred)
p_valor = summary(modelo)$coefficients[,4][2]
if(p_valor < 0.1 && p_valor > 0){
variablesSignificativasCredit = c(variablesSignificativasCredit, nombre)
}
}
variablesSignificativasCredit
# Función para calcular la solución dada una predicción.
calculateSol = function(x){
prediction.model = rep(0,length(x))
prediction.model[x >= 0.5] = 1
prediction.model
}
# Función para calcular el Error.
calculateErrorClasification = function(calculated.solution, real.sol){
er = sum(calculated.solution != real.sol)/length(calculated.solution)
er
}
# Función que calcula el Error pasándole la predicción.
calculateError = function(model.prediction, labels){
pred = calculateSol(model.prediction)
return(calculateErrorClasification(pred, labels))
}
testTransformado = reemplazarCol(credit_card.test)
testTransformado = predict(trans, testTransformado)
dim(trainTransformado)
dim(testTransformado)
summary(testTransformado)
m1 = glm(default.payment.next.month~LIMIT_BAL+SEX+PAY_3+PAY_4+PAY_5+PAY_6+BILL_AMT1+BILL_AMT2+BILL_AMT3+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT3+PAY_AMT4+PAY_AMT5+PAY_AMT6+ed.other+ed.high_school+ed.school+ed.university+marriage.married+marriage.single, data=trainTransformado, family="binomial")
predtr.m1 = predict(m1, trainTransformado)
Ein.m1 = calculateError(predtr.m1, trainTransformado$default.payment.next.month)
Ein.m1
pred.m1 = predict(m1, testTransformado)
Eout.m1 = calculateError(pred.m1, testTransformado$default.payment.next.month)
Eout.m1
m2 = glm(default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married+PAY_3+SEX+PAY_AMT2+ed.high_school+PAY_AMT4+marriage.single+marriage.others+BILL_AMT2,data=trainTransformado, family="binomial")
predtr.m2 = predict(m2, trainTransformado)
Ein.m2 = calculateError(predtr.m2, trainTransformado$default.payment.next.month)
Ein.m2
pred.m2 = predict(m2, testTransformado)
Eout.m2 = calculateError(pred.m2, testTransformado$default.payment.next.month)
Eout.m2
m3= glm(default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, family="binomial" )
predtr.m3 = predict(m3, trainTransformado)
Ein.m3 = calculateError(predtr.m3, trainTransformado$default.payment.next.month)
Ein.m3
pred.m3 = predict(m3, testTransformado)
Eout.m3 = calculateError(pred.m3, testTransformado$default.payment.next.month)
Eout.m3
linear.model = prediction(pred.m3, testTransformado$default.payment.next.month)
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado)
plot(nn1)
# pred.nn1 = predict(nn1, trainTransformado)
# Ein.nn1 = pred.nn1$error
# Ein.nn1
#
# predTs.nn1 = predict(nn1, testTransformado)
# Eout.nn1 = predTs.nn1$error
# Eout.nn1
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado)
plot(nn1)
pred.nn1 = predict(nn1, trainTransformado)
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado)
plot(nn1)
summary(nn1)
# pred.nn1 = predict(nn1, trainTransformado)
# Ein.nn1 = pred.nn1$error
# Ein.nn1
#
# predTs.nn1 = predict(nn1, testTransformado)
# Eout.nn1 = predTs.nn1$error
# Eout.nn1
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado)
nn1
summary(nn1)
# pred.nn1 = predict(nn1, trainTransformado)
# Ein.nn1 = pred.nn1$error
# Ein.nn1
#
# predTs.nn1 = predict(nn1, testTransformado)
# Eout.nn1 = predTs.nn1$error
# Eout.nn1
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado)
plot(nn1)
nn1
# pred.nn1 = predict(nn1, trainTransformado)
# Ein.nn1 = pred.nn1$error
# Ein.nn1
#
# predTs.nn1 = predict(nn1, testTransformado)
# Eout.nn1 = predTs.nn1$error
# Eout.nn1
n <- names(trainTransformado)
f <- as.formula(paste("default.payment.next.month  ~ PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
n <- names(trainTransformado)
f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
# nn1 = neuralnet(formula =  default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado)
#
# plot(nn1)
# nn1
# pred.nn1 = predict(nn1, trainTransformado)
# Ein.nn1 = pred.nn1$error
# Ein.nn1
#
# predTs.nn1 = predict(nn1, testTransformado)
# Eout.nn1 = predTs.nn1$error
# Eout.nn1
n <- names(trainTransformado)
f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
neuralnet(f,data=trainTransformado, hidden = c(5,3), linear.output = T)
n <- names(trainTransformado)
f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
neuralnet(f,data=trainTransformado, hidden = c(5,3), linear.output = T)
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = c(5,3), linear.output = T)
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = c(5,3), linear.output = F)
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado)
knitr::opts_chunk$set(echo = TRUE)
#Librerías utilizadas.
library("caret")
library("leaps")
library("e1071")
library("ROCR")
library("fastAdaboost")
library("pROC")
library("neuralnet")
set.seed(1)
credit_card =  read.csv("default_of_credict_card_clients.csv"
, sep=",", header = TRUE, row.names =1)
attach(credit_card)
summary(credit_card)
set.seed(1)
train = sample (nrow(credit_card), round(nrow(credit_card)*0.7))
credit_card.train = credit_card[train,]
credit_card.test = credit_card[-train,]
anyNA(credit_card.train)
# Modificamos la columna 2, llamada sex, para dividir los datos en 0=mujer, 1=hombre.
credit_card.train$SEX = ifelse(credit_card.train$SEX == 2, 0, 1)
summary(credit_card.train)
# TambiÃ©n tenemos que modificar la columna EDUCATION, la dividiremos en cuatro columnas diferentes:
# ed.other, ed.university, ed.high_school, ed.school
ed.other = ifelse(credit_card.train$EDUCATION == 4, 1,0)
ed.university = ifelse(credit_card.train$EDUCATION == 2, 1, 0)
ed.high_school = ifelse(credit_card.train$EDUCATION == 3 | credit_card.train$EDUCATION == 2, 1, 0)
ed.school = ifelse(credit_card.train$EDUCATION == 1 | credit_card.train$EDUCATION == 2 | credit_card.train$EDUCATION == 3, 1, 0)
credit_card.train = cbind(credit_card.train,ed.other, ed.high_school, ed.school, ed.university)
# Borramos la columna EDUCATION.
credit_card.train = credit_card.train[,-which(colnames(credit_card.train) == "EDUCATION")]
summary(credit_card.train)
# TambiÃ©n tenemos que modificar la columna mariage. Introduciremos tres nueva columnas: marriage.married, marriage.single, marriage.others.
marriage.married = ifelse(credit_card.train$MARRIAGE == 1, 1,0)
marriage.single = ifelse(credit_card.train$MARRIAGE == 2, 1,0)
marriage.others = ifelse(credit_card.train$MARRIAGE == 3, 1,0)
# Introducimos los datos.
credit_card.train = cbind(credit_card.train, marriage.married, marriage.single, marriage.others)
# Borramos la variable MARRIAGE.
credit_card.train = credit_card.train[, -which(colnames(credit_card.train) == "MARRIAGE")]
summary(credit_card.train)
colnames(credit_card.train)[which(colnames(credit_card.train)=="PAY_0")]="PAY_1"
summary(credit_card.train)
# Por Ãºltimo, utilizamos la funciÃ³n preprocess.
trans = preProcess(credit_card.train, c("BoxCox") )
trainTransformado = predict(trans, credit_card.train)
summary(trainTransformado)
# Para hacer mÃ¡s sencillo hacer las transformaciones al conjunto de test, se crearÃ¡n funciones para realizar todo lo anterior.
# FunciÃ³n para comprobar si hay datos pÃ©rdidos y reemplazarlos.
reemplazarCol = function(x){
# Columna SEX
x$SEX = ifelse(x$SEX == 2, 0, 1)
# Columna EDUCATION.
ed.other = ifelse(x$EDUCATION == 4, 1,0)
ed.university = ifelse(x$EDUCATION == 2, 1, 0)
ed.high_school = ifelse(x$EDUCATION == 3 | x$EDUCATION == 2, 1, 0)
ed.school = ifelse(x$EDUCATION == 1 | x$EDUCATION == 2 | x$EDUCATION == 3, 1, 0)
x = cbind(x,ed.other, ed.high_school, ed.school, ed.university)
# Borramos la columna EDUCATION.
x = x[,-which(colnames(x) == "EDUCATION")]
# Columna MARRIAGE.
marriage.married = ifelse(x$MARRIAGE == 1, 1,0)
marriage.single = ifelse(x$MARRIAGE == 2, 1,0)
marriage.others = ifelse(x$MARRIAGE == 3, 1,0)
# Introducimos los datos.
x = cbind(x, marriage.married, marriage.single, marriage.others)
# Borramos la variable MARRIAGE.
x = x[, -which(colnames(x) == "MARRIAGE")]
# Cambiamos el nombre de la variables PAY_0.
colnames(x)[which(colnames(x)=="PAY_0")]="PAY_1"
x
}
preprocesar = function(x,pred=trans){
transTest = predict(pred, x)
transTest
}
prepareTest = function(x){
tr = reemplazarCol(x)
tr= preprocesar(x)
tr
}
pcaTransformation = prcomp(trainTransformado[,-default.payment.next.month], center=F, scale=F)
pcaTransformation$rotation
#modelo_step = glm(default.payment.next.month ~ .,family = gaussian, data=trainTransformado)
#modelo_principal = step(modelo_step)
muestra_regsubsets = regsubsets(default.payment.next.month ~ ., data = trainTransformado, nvmax = 28, method = "exhaustive")
summary((muestra_regsubsets))
reg.sumary = summary(muestra_regsubsets)
par(mfrow=c(1,2))
plot(reg.sumary$cp, xlab="number of variables", ylab="cp", type="l")
which.min(reg.sumary$cp)
plot(reg.sumary$bic, xlab="number of variables", ylab="BIC", type="l")
which.min(reg.sumary$bic)
par(mfrow=c(1,1) )
variablesSignificativasCredit = character()
for(nombre in names(trainTransformado) ){
pred = trainTransformado[, nombre]
modelo = lm(trainTransformado$default.payment.next.month~pred)
p_valor = summary(modelo)$coefficients[,4][2]
if(p_valor < 0.1 && p_valor > 0){
variablesSignificativasCredit = c(variablesSignificativasCredit, nombre)
}
}
variablesSignificativasCredit
# Función para calcular la solución dada una predicción.
calculateSol = function(x){
prediction.model = rep(0,length(x))
prediction.model[x >= 0.5] = 1
prediction.model
}
# Función para calcular el Error.
calculateErrorClasification = function(calculated.solution, real.sol){
er = sum(calculated.solution != real.sol)/length(calculated.solution)
er
}
# Función que calcula el Error pasándole la predicción.
calculateError = function(model.prediction, labels){
pred = calculateSol(model.prediction)
return(calculateErrorClasification(pred, labels))
}
testTransformado = reemplazarCol(credit_card.test)
testTransformado = predict(trans, testTransformado)
dim(trainTransformado)
dim(testTransformado)
summary(testTransformado)
m1 = glm(default.payment.next.month~LIMIT_BAL+SEX+PAY_3+PAY_4+PAY_5+PAY_6+BILL_AMT1+BILL_AMT2+BILL_AMT3+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT3+PAY_AMT4+PAY_AMT5+PAY_AMT6+ed.other+ed.high_school+ed.school+ed.university+marriage.married+marriage.single, data=trainTransformado, family="binomial")
predtr.m1 = predict(m1, trainTransformado)
Ein.m1 = calculateError(predtr.m1, trainTransformado$default.payment.next.month)
Ein.m1
pred.m1 = predict(m1, testTransformado)
Eout.m1 = calculateError(pred.m1, testTransformado$default.payment.next.month)
Eout.m1
m2 = glm(default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married+PAY_3+SEX+PAY_AMT2+ed.high_school+PAY_AMT4+marriage.single+marriage.others+BILL_AMT2,data=trainTransformado, family="binomial")
predtr.m2 = predict(m2, trainTransformado)
Ein.m2 = calculateError(predtr.m2, trainTransformado$default.payment.next.month)
Ein.m2
pred.m2 = predict(m2, testTransformado)
Eout.m2 = calculateError(pred.m2, testTransformado$default.payment.next.month)
Eout.m2
m3= glm(default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, family="binomial" )
predtr.m3 = predict(m3, trainTransformado)
Ein.m3 = calculateError(predtr.m3, trainTransformado$default.payment.next.month)
Ein.m3
pred.m3 = predict(m3, testTransformado)
Eout.m3 = calculateError(pred.m3, testTransformado$default.payment.next.month)
Eout.m3
linear.model = prediction(pred.m3, testTransformado$default.payment.next.month)
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = c(5))
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado)
plot(nn1)
# nn1
# pred.nn1 = predict(nn1, trainTransformado)
# Ein.nn1 = pred.nn1$error
# Ein.nn1
#
# predTs.nn1 = predict(nn1, testTransformado)
# Eout.nn1 = predTs.nn1$error
# Eout.nn1
knitr::opts_chunk$set(echo = TRUE)
#Librerías utilizadas.
library("caret")
library("leaps")
library("e1071")
library("ROCR")
library("fastAdaboost")
library("pROC")
library("neuralnet")
set.seed(1)
credit_card =  read.csv("default_of_credict_card_clients.csv"
, sep=",", header = TRUE, row.names =1)
attach(credit_card)
summary(credit_card)
set.seed(1)
train = sample (nrow(credit_card), round(nrow(credit_card)*0.7))
credit_card.train = credit_card[train,]
credit_card.test = credit_card[-train,]
anyNA(credit_card.train)
# Modificamos la columna 2, llamada sex, para dividir los datos en 0=mujer, 1=hombre.
credit_card.train$SEX = ifelse(credit_card.train$SEX == 2, 0, 1)
summary(credit_card.train)
# TambiÃ©n tenemos que modificar la columna EDUCATION, la dividiremos en cuatro columnas diferentes:
# ed.other, ed.university, ed.high_school, ed.school
ed.other = ifelse(credit_card.train$EDUCATION == 4, 1,0)
ed.university = ifelse(credit_card.train$EDUCATION == 2, 1, 0)
ed.high_school = ifelse(credit_card.train$EDUCATION == 3 | credit_card.train$EDUCATION == 2, 1, 0)
ed.school = ifelse(credit_card.train$EDUCATION == 1 | credit_card.train$EDUCATION == 2 | credit_card.train$EDUCATION == 3, 1, 0)
credit_card.train = cbind(credit_card.train,ed.other, ed.high_school, ed.school, ed.university)
# Borramos la columna EDUCATION.
credit_card.train = credit_card.train[,-which(colnames(credit_card.train) == "EDUCATION")]
summary(credit_card.train)
# TambiÃ©n tenemos que modificar la columna mariage. Introduciremos tres nueva columnas: marriage.married, marriage.single, marriage.others.
marriage.married = ifelse(credit_card.train$MARRIAGE == 1, 1,0)
marriage.single = ifelse(credit_card.train$MARRIAGE == 2, 1,0)
marriage.others = ifelse(credit_card.train$MARRIAGE == 3, 1,0)
# Introducimos los datos.
credit_card.train = cbind(credit_card.train, marriage.married, marriage.single, marriage.others)
# Borramos la variable MARRIAGE.
credit_card.train = credit_card.train[, -which(colnames(credit_card.train) == "MARRIAGE")]
summary(credit_card.train)
colnames(credit_card.train)[which(colnames(credit_card.train)=="PAY_0")]="PAY_1"
summary(credit_card.train)
# Por Ãºltimo, utilizamos la funciÃ³n preprocess.
trans = preProcess(credit_card.train, c("BoxCox") )
trainTransformado = predict(trans, credit_card.train)
summary(trainTransformado)
# Para hacer mÃ¡s sencillo hacer las transformaciones al conjunto de test, se crearÃ¡n funciones para realizar todo lo anterior.
# FunciÃ³n para comprobar si hay datos pÃ©rdidos y reemplazarlos.
reemplazarCol = function(x){
# Columna SEX
x$SEX = ifelse(x$SEX == 2, 0, 1)
# Columna EDUCATION.
ed.other = ifelse(x$EDUCATION == 4, 1,0)
ed.university = ifelse(x$EDUCATION == 2, 1, 0)
ed.high_school = ifelse(x$EDUCATION == 3 | x$EDUCATION == 2, 1, 0)
ed.school = ifelse(x$EDUCATION == 1 | x$EDUCATION == 2 | x$EDUCATION == 3, 1, 0)
x = cbind(x,ed.other, ed.high_school, ed.school, ed.university)
# Borramos la columna EDUCATION.
x = x[,-which(colnames(x) == "EDUCATION")]
# Columna MARRIAGE.
marriage.married = ifelse(x$MARRIAGE == 1, 1,0)
marriage.single = ifelse(x$MARRIAGE == 2, 1,0)
marriage.others = ifelse(x$MARRIAGE == 3, 1,0)
# Introducimos los datos.
x = cbind(x, marriage.married, marriage.single, marriage.others)
# Borramos la variable MARRIAGE.
x = x[, -which(colnames(x) == "MARRIAGE")]
# Cambiamos el nombre de la variables PAY_0.
colnames(x)[which(colnames(x)=="PAY_0")]="PAY_1"
x
}
preprocesar = function(x,pred=trans){
transTest = predict(pred, x)
transTest
}
prepareTest = function(x){
tr = reemplazarCol(x)
tr= preprocesar(x)
tr
}
pcaTransformation = prcomp(trainTransformado[,-default.payment.next.month], center=F, scale=F)
pcaTransformation$rotation
#modelo_step = glm(default.payment.next.month ~ .,family = gaussian, data=trainTransformado)
#modelo_principal = step(modelo_step)
muestra_regsubsets = regsubsets(default.payment.next.month ~ ., data = trainTransformado, nvmax = 28, method = "exhaustive")
summary((muestra_regsubsets))
reg.sumary = summary(muestra_regsubsets)
par(mfrow=c(1,2))
plot(reg.sumary$cp, xlab="number of variables", ylab="cp", type="l")
which.min(reg.sumary$cp)
plot(reg.sumary$bic, xlab="number of variables", ylab="BIC", type="l")
which.min(reg.sumary$bic)
par(mfrow=c(1,1) )
variablesSignificativasCredit = character()
for(nombre in names(trainTransformado) ){
pred = trainTransformado[, nombre]
modelo = lm(trainTransformado$default.payment.next.month~pred)
p_valor = summary(modelo)$coefficients[,4][2]
if(p_valor < 0.1 && p_valor > 0){
variablesSignificativasCredit = c(variablesSignificativasCredit, nombre)
}
}
variablesSignificativasCredit
# Función para calcular la solución dada una predicción.
calculateSol = function(x){
prediction.model = rep(0,length(x))
prediction.model[x >= 0.5] = 1
prediction.model
}
# Función para calcular el Error.
calculateErrorClasification = function(calculated.solution, real.sol){
er = sum(calculated.solution != real.sol)/length(calculated.solution)
er
}
# Función que calcula el Error pasándole la predicción.
calculateError = function(model.prediction, labels){
pred = calculateSol(model.prediction)
return(calculateErrorClasification(pred, labels))
}
testTransformado = reemplazarCol(credit_card.test)
testTransformado = predict(trans, testTransformado)
dim(trainTransformado)
dim(testTransformado)
summary(testTransformado)
m1 = glm(default.payment.next.month~LIMIT_BAL+SEX+PAY_3+PAY_4+PAY_5+PAY_6+BILL_AMT1+BILL_AMT2+BILL_AMT3+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT3+PAY_AMT4+PAY_AMT5+PAY_AMT6+ed.other+ed.high_school+ed.school+ed.university+marriage.married+marriage.single, data=trainTransformado, family="binomial")
predtr.m1 = predict(m1, trainTransformado)
Ein.m1 = calculateError(predtr.m1, trainTransformado$default.payment.next.month)
Ein.m1
pred.m1 = predict(m1, testTransformado)
Eout.m1 = calculateError(pred.m1, testTransformado$default.payment.next.month)
Eout.m1
m2 = glm(default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married+PAY_3+SEX+PAY_AMT2+ed.high_school+PAY_AMT4+marriage.single+marriage.others+BILL_AMT2,data=trainTransformado, family="binomial")
predtr.m2 = predict(m2, trainTransformado)
Ein.m2 = calculateError(predtr.m2, trainTransformado$default.payment.next.month)
Ein.m2
pred.m2 = predict(m2, testTransformado)
Eout.m2 = calculateError(pred.m2, testTransformado$default.payment.next.month)
Eout.m2
m3= glm(default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, family="binomial" )
predtr.m3 = predict(m3, trainTransformado)
Ein.m3 = calculateError(predtr.m3, trainTransformado$default.payment.next.month)
Ein.m3
pred.m3 = predict(m3, testTransformado)
Eout.m3 = calculateError(pred.m3, testTransformado$default.payment.next.month)
Eout.m3
linear.model = prediction(pred.m3, testTransformado$default.payment.next.month)
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = c(2))
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = 2)
plot(nn1)
# nn1
# pred.nn1 = predict(nn1, trainTransformado)
# Ein.nn1 = pred.nn1$error
# Ein.nn1
#
# predTs.nn1 = predict(nn1, testTransformado)
# Eout.nn1 = predTs.nn1$error
# Eout.nn1
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = c(2,2))
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = 5)
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = 2)
plot(nn1)
# nn1
# pred.nn1 = predict(nn1, trainTransformado)
# Ein.nn1 = pred.nn1$error
# Ein.nn1
#
# predTs.nn1 = predict(nn1, testTransformado)
# Eout.nn1 = predTs.nn1$error
# Eout.nn1
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = 5)
# n <- names(trainTransformado)
# f <- as.formula(paste("default.payment.next.month  ~", paste(n[!n %in% "default.payment.next.month"], collapse = " + " )))
nn1 = neuralnet(formula = default.payment.next.month~PAY_1+PAY_2+BILL_AMT1+LIMIT_BAL+AGE+ed.school+PAY_AMT1+PAY_5+marriage.married,data=trainTransformado, hidden = 2)
